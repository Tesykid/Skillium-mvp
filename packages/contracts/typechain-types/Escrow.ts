/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelJob"
      | "createJob"
      | "fundJob"
      | "jobs"
      | "nextJobId"
      | "releaseFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundsReleased"
      | "JobCancelled"
      | "JobCreated"
      | "JobFunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createJob",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "nextJobId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "cancelJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextJobId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseFunds",
    data: BytesLike
  ): Result;
}

export namespace FundsReleasedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    worker: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, worker: string, amount: bigint];
  export interface OutputObject {
    jobId: bigint;
    worker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCancelledEvent {
  export type InputTuple = [jobId: BigNumberish];
  export type OutputTuple = [jobId: bigint];
  export interface OutputObject {
    jobId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCreatedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    client: AddressLike,
    worker: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    client: string,
    worker: string,
    amount: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    client: string;
    worker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobFundedEvent {
  export type InputTuple = [jobId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [jobId: bigint, amount: bigint];
  export interface OutputObject {
    jobId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Escrow extends BaseContract {
  connect(runner?: ContractRunner | null): Escrow;
  waitForDeployment(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelJob: TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;

  createJob: TypedContractMethod<
    [worker: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  fundJob: TypedContractMethod<[jobId: BigNumberish], [void], "payable">;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean, boolean, boolean] & {
        client: string;
        worker: string;
        amount: bigint;
        funded: boolean;
        released: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;

  nextJobId: TypedContractMethod<[], [bigint], "view">;

  releaseFunds: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelJob"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createJob"
  ): TypedContractMethod<
    [worker: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundJob"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean, boolean, boolean] & {
        client: string;
        worker: string;
        amount: bigint;
        funded: boolean;
        released: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextJobId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "releaseFunds"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "FundsReleased"
  ): TypedContractEvent<
    FundsReleasedEvent.InputTuple,
    FundsReleasedEvent.OutputTuple,
    FundsReleasedEvent.OutputObject
  >;
  getEvent(
    key: "JobCancelled"
  ): TypedContractEvent<
    JobCancelledEvent.InputTuple,
    JobCancelledEvent.OutputTuple,
    JobCancelledEvent.OutputObject
  >;
  getEvent(
    key: "JobCreated"
  ): TypedContractEvent<
    JobCreatedEvent.InputTuple,
    JobCreatedEvent.OutputTuple,
    JobCreatedEvent.OutputObject
  >;
  getEvent(
    key: "JobFunded"
  ): TypedContractEvent<
    JobFundedEvent.InputTuple,
    JobFundedEvent.OutputTuple,
    JobFundedEvent.OutputObject
  >;

  filters: {
    "FundsReleased(uint256,address,uint256)": TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
    FundsReleased: TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;

    "JobCancelled(uint256)": TypedContractEvent<
      JobCancelledEvent.InputTuple,
      JobCancelledEvent.OutputTuple,
      JobCancelledEvent.OutputObject
    >;
    JobCancelled: TypedContractEvent<
      JobCancelledEvent.InputTuple,
      JobCancelledEvent.OutputTuple,
      JobCancelledEvent.OutputObject
    >;

    "JobCreated(uint256,address,address,uint256)": TypedContractEvent<
      JobCreatedEvent.InputTuple,
      JobCreatedEvent.OutputTuple,
      JobCreatedEvent.OutputObject
    >;
    JobCreated: TypedContractEvent<
      JobCreatedEvent.InputTuple,
      JobCreatedEvent.OutputTuple,
      JobCreatedEvent.OutputObject
    >;

    "JobFunded(uint256,uint256)": TypedContractEvent<
      JobFundedEvent.InputTuple,
      JobFundedEvent.OutputTuple,
      JobFundedEvent.OutputObject
    >;
    JobFunded: TypedContractEvent<
      JobFundedEvent.InputTuple,
      JobFundedEvent.OutputTuple,
      JobFundedEvent.OutputObject
    >;
  };
}
